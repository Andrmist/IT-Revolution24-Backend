package internal

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"github.com/gorilla/websocket"
	"itrevolution-backend/internal/controllers/auth"
	"itrevolution-backend/internal/controllers/messages"
	"itrevolution-backend/internal/controllers/pets"
	"itrevolution-backend/internal/controllers/shops"
	"itrevolution-backend/internal/controllers/users"
	"itrevolution-backend/internal/controllers/websockets"
	"itrevolution-backend/internal/domain"
	"itrevolution-backend/internal/types"
	"net/http"
	"strings"
	"time"

	_ "github.com/swaggo/http-swagger/example/go-chi/docs" // docs is generated by Swag CLI, you have to import it.

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
	"github.com/go-chi/cors"
)

func Run(ctx context.Context, serverCtx types.ServerContext) {
	r := chi.NewRouter()

	r.Use(middleware.Logger)
	r.Use(middleware.Timeout(60 * time.Second))
	r.Use(contextMiddleware(serverCtx))
	r.Use(cors.Handler(cors.Options{
		AllowedOrigins:   []string{"*"},
		AllowedMethods:   []string{"GET", "POST", "PATCH", "DELETE", "OPTIONS"},
		AllowedHeaders:   []string{"Accept", "Authorization", "Content-Type", "X-CSRF-Token"},
		ExposedHeaders:   []string{"Link"},
		AllowCredentials: true,
		MaxAge:           300, // Maximum value not ignored by any of major browsers
	}))
	r.Use(middleware.Recoverer)

	r.Route("/api/auth", func(r chi.Router) {
		r.Post("/refresh_token", auth.RefreshToken)
		r.Post("/register", auth.Register)
		r.Post("/login", auth.Login)
		r.Post("/code", auth.RegisterCode)
	})

	r.Route("/api/users", func(r chi.Router) {
		r.Get("/me", roleGuard([]string{"*"}, users.UsersGetMe))
		r.Get("/", roleGuard([]string{"*"}, users.UsersGetAll))
		r.Get("/children", roleGuard([]string{"*"}, users.UsersGetChildren))
		r.Patch("/me", roleGuard([]string{"*"}, users.UsersUpdateMe))
	})

	r.Route("/api/pets", func(r chi.Router) {
		r.Get("/", roleGuard([]string{"*"}, pets.PetsGetAll))
		r.Post("/feed", roleGuard([]string{"*"}, pets.PetsFeed))
		r.Post("/sell", roleGuard([]string{"*"}, pets.PetsSell))
	})

	r.Route("/api/ws", func(r chi.Router) {
		r.HandleFunc("/test", websockets.WebSocketAuthHandler(func(serverCtx types.ServerContext, connection *websocket.Conn, user domain.User, stateChan chan int) {
			data, _ := json.Marshal(user)
			connection.WriteMessage(websocket.TextMessage, data)
			stateChan <- websockets.WEBSOCKET_STATE_CONTINUE
		}))
		r.HandleFunc("/events", websockets.WebSocketAuthHandler(websockets.EventWebSocketHandler))
	})

	r.Route("/api/shops", func(r chi.Router) {
		r.Post("/buy/pet", roleGuard([]string{"child"}, shops.ShopsBuyPet))
		r.Post("/buy/food", roleGuard([]string{"child"}, shops.ShopsBuyFood))
		r.Get("/wall", roleGuard([]string{"child"}, shops.ShopsGenerateWallShop))
	})

	r.Route("/api/messages", func(r chi.Router) {
		r.Get("/read/{id}", roleGuard([]string{"*"}, messages.ReadMessage))
	})

	go func() {
		serverCtx.Log.Info("Server is listening")
		if err := http.ListenAndServe(fmt.Sprintf("0.0.0.0:%v", serverCtx.Config.Port), r); err != nil {
			serverCtx.Log.Fatal(err)
		}
	}()
}

func contextMiddleware(serverCtx types.ServerContext) func(next http.Handler) http.Handler {
	return func(next http.Handler) http.Handler {
		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			ctx := context.WithValue(r.Context(), "server", serverCtx)
			next.ServeHTTP(w, r.WithContext(ctx))
		})
	}
}

func roleGuard(roles []string, next http.HandlerFunc) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		serverCtx := r.Context().Value("server").(types.ServerContext)
		authorization := r.Header.Get("Authorization")

		parsedAuthorization := strings.Split(authorization, " ")
		if len(parsedAuthorization) == 2 {
			user, err := auth.GetUserFromAccessToken(serverCtx, parsedAuthorization[1])
			if err != nil {
				domain.HTTPError(w, r, http.StatusUnauthorized, nil)
				return
			}
			if !user.IsRegistered {
				domain.HTTPError(w, r, http.StatusUnauthorized, errors.New("Your account is not activated. Check your email and try again."))
				return
			}
			for _, role := range roles {
				if role == "*" || role == user.Role {
					ctx := context.WithValue(r.Context(), "user", user)
					next.ServeHTTP(w, r.WithContext(ctx))
					return
				}
			}
			w.WriteHeader(http.StatusForbidden)
		} else {
			w.WriteHeader(http.StatusUnauthorized)
			return
		}
	}
}
